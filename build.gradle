buildscript {
  ext.isCi = Boolean.parseBoolean(System.getProperty('CI', 'false'))

  ext.versions = [
      'kotlin': '1.2.30',
      'dokka': '0.9.15'
  ]

  ext.deps = [
      'kotlin': "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}",
      'okhttp': 'com.squareup.okhttp3:okhttp:3.8.0',
      'guavaAndroid': 'com.google.guava:guava:23.0-android',
      'truth': 'com.google.truth:truth:0.34',
      'junit': 'junit:junit:4.12'
  ]

  ext.release = [
      'groupId': 'com.caseykulm.oauthheader',
      'version': '0.4.0',
      'description': 'OkHttp OAuth 1.0 3-legged Helper',
      'githubRepo': 'https://github.com/caseykulm/oauthheader',
      'secrets': [
          // Add secrets to System Environment Variables or Gradle Properties
          'bintray': [
              'user':
                  System.env.BINTRAY_USER ?:
                      (project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : ''),
              'key':
                  System.env.BINTRAY_API_KEY ?:
                      (project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : ''),
              'gpgPassphrase':
                  System.env.BINTRAY_GPG_PASSWORD ?:
                      (project.hasProperty('BINTRAY_GPG_PASSWORD') ? project.property('BINTRAY_GPG_PASSWORD') : ''),
          ],
          'sonatype': [
              'user':
                  System.env.SONATYPE_USER ?:
                      (project.hasProperty('SONATYPE_USER') ? project.property('SONATYPE_USER') : ''),
              'password':
                  System.env.SONATYPE_PASSWORD ?:
                      (project.hasProperty('SONATYPE_PASSWORD') ? project.property('SONATYPE_PASSWORD') : ''),
          ]
      ]
  ]

  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:${versions.dokka}"
  }
}

subprojects { project ->
  apply plugin: 'kotlin'
  apply plugin: 'org.jetbrains.dokka'

  repositories {
    mavenCentral()
  }

  compileKotlin {
    kotlinOptions.jvmTarget = "1.6"
  }
  compileTestKotlin {
    kotlinOptions.jvmTarget = "1.6"
  }

  dokka {
    moduleName = "${project.name}"
    outputFormat = 'gfm'
    outputDirectory = "${project.rootProject.rootDir}/kotlindocs"

    jdkVersion = 6 // Used for linking to JDK
  }
}

allprojects {
  def isParent = project.name.contains("parent")

  group "${release.groupId}"
  version "${release.version}"

  apply plugin: 'com.jfrog.bintray'
  apply plugin: 'maven-publish'
  apply plugin: 'maven'

  repositories {
    mavenCentral()
  }

  if (!isParent) {
    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
      archives sourcesJar, javadocJar
    }

    task checkSecrets {
      doLast {
        if (release.secrets.bintray.user.isEmpty()) {
          throw new IllegalStateException('BINTRAY_USER must be defined in Environment Variable or Gradle Properties')
        }
        if (release.secrets.bintray.key.isEmpty()) {
          throw new IllegalStateException('BINTRAY_API_KEY must be defined in Environment Variable or Gradle Properties')
        }
        if (release.secrets.bintray.gpgPassphrase.isEmpty()) {
          throw new IllegalStateException('BINTRAY_GPG_PASSWORD must be defined in Environment Variable or Gradle Properties')
        }
        if (release.secrets.sonatype.user.isEmpty()) {
          throw new IllegalStateException('SONATYPE_USER must be defined in Environment Variable or Gradle Properties')
        }
        if (release.secrets.sonatype.password.isEmpty()) {
          throw new IllegalStateException('SONATYPE_PASSWORD must be defined in Environment Variable or Gradle Properties')
        }
      }
    }

    task updateReadmeVersion {
      doLast {
        def readmeFileString = new File('README.md').getText('UTF-8')                         // Read file
        def updatedString = readmeFileString.replaceAll(/\d+.\d+.\d+/, "${release.version}")  // replace versions
        new File('README.md').write(updatedString, 'UTF-8')                                   // Write file
      }
    }

    build.dependsOn("updateReadmeVersion")
    bintrayUpload.dependsOn("checkSecrets")
  }

  afterEvaluate { project ->
    // Create the pom configuration:
    def pomConfig = {
      licenses {
        license {
          name "The Apache Software License, Version 2.0"
          url "http://www.apache.org/licenses/LICENSE-2.0.txt"
          distribution "repo"
        }
      }

      if (isParent) {
        // only add modules field to parent
        modules {
          project.subprojects.forEach { module "${it.name}" }
        }
      }

      developers {
        developer {
          id "caseykulm"
          name "Casey Kulm"
          email "mlukyesac@gmail.com"
        }
      }

      scm {
        url "${release.githubRepo}"
      }
    }

    publishing {
      publications {
        MyPublication(MavenPublication) {
          if (!isParent) {
            // Only generate jar/sources/javadocs if not parent
            from components.java
            artifact sourcesJar
            artifact javadocJar
          }
          groupId "${release.groupId}"
          artifactId "${project.name}"
          version "${release.version}"
          pom.withXml {
            def root = asNode()
            root.appendNode('description', "${release.description}")
            root.appendNode('name', 'oauthheader')
            root.appendNode('url', "${release.githubRepo}")
            root.children().last() + pomConfig
          }
        }
      }
    }

    bintray {
      user = release.secrets.bintray.user
      key = release.secrets.bintray.key

      dryRun = false     // Whether to run this as dry-run, without deploying
      publish = true    // Whether version should be auto published after an upload
      override = false // Whether to override version artifacts already published

      publications = ['MyPublication']
      // - AND/OR -
      filesSpec {
        from 'build/libs'
        into '.'
      }

      pkg {
        repo = 'maven'
        name = 'oauthheader'
        userOrg = release.secrets.bintray.user
        desc = "${release.description}"
        licenses = ['Apache-2.0']
        websiteUrl = "${release.githubRepo}"
        issueTrackerUrl = 'https://github.com/caseykulm/oauthheader/issues'
        vcsUrl = 'https://github.com/caseykulm/oauthheader.git'
        labels = ['oauth', 'kotlin', 'java']
        publicDownloadNumbers = true
        githubRepo = 'caseykulm/oauthheader'
        githubReleaseNotesFile = 'README.md'
        version {
          name = "${release.version}"
          desc = "${release.description}"
          released  = new Date()
          vcsTag = "${release.version}"
          gpg {
            sign = true //Determines whether to GPG sign the files. The default is false
            passphrase = release.secrets.bintray.gpgPassphrase //Optional. The passphrase for GPG signing'
          }
          mavenCentralSync {
            sync = true
            user = release.secrets.sonatype.user //OSS user token: mandatory
            password = release.secrets.sonatype.password //OSS user password: mandatory
            close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
          }
        }
      }
    }
  }
}
